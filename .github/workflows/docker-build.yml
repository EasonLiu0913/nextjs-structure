name: Docker Build and Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 建置和推送 Docker 映像
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NEXT_PUBLIC_APP_NAME=${{ secrets.STAGING_APP_NAME }}
          NEXT_PUBLIC_APP_URL=${{ secrets.STAGING_APP_URL }}
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json
        retention-days: 30

  # 安全性掃描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      packages: read
      security-events: write
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 測試 Docker 映像
  test-image:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Pull Docker image
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    
    - name: Test container startup
      run: |
        # 啟動容器
        docker run -d --name test-container \
          -p 3000:3000 \
          -e NEXT_PUBLIC_APP_NAME="Test App" \
          -e NEXT_PUBLIC_APP_URL="http://localhost:3000" \
          -e NEXTAUTH_SECRET="test-secret" \
          -e NEXTAUTH_URL="http://localhost:3000" \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # 等待容器啟動
        sleep 30
        
        # 健康檢查
        curl -f http://localhost:3000/api/health || exit 1
        
        # 檢查首頁
        curl -f http://localhost:3000 || exit 1
        
        # 清理
        docker stop test-container
        docker rm test-container
    
    - name: Test with Docker Compose
      run: |
        # 建立測試用的 docker-compose 檔案
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        services:
          app:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ports:
              - "3001:3000"
            environment:
              - NEXT_PUBLIC_APP_NAME=Test App
              - NEXT_PUBLIC_APP_URL=http://localhost:3001
              - NEXTAUTH_SECRET=test-secret
              - NEXTAUTH_URL=http://localhost:3001
        EOF
        
        # 啟動服務
        docker-compose -f docker-compose.test.yml up -d
        
        # 等待服務啟動
        sleep 30
        
        # 測試
        curl -f http://localhost:3001/api/health || exit 1
        
        # 清理
        docker-compose -f docker-compose.test.yml down

  # 通知結果
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, test-image]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.build-and-push.result == 'success' && needs.security-scan.result == 'success' && needs.test-image.result == 'success' }}
      uses: slackapi/slack-github-action@v1
      with:
        status: success
        text: |
          🐳 Docker image built and tested successfully!
          
          📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          🔍 Security scan: Passed
          🧪 Container tests: Passed
          
          Ready for deployment! 🚀
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Notify failure
      if: ${{ needs.build-and-push.result == 'failure' || needs.security-scan.result == 'failure' || needs.test-image.result == 'failure' }}
      uses: slackapi/slack-github-action@v1
      with:
        status: failure
        text: |
          🚨 Docker build/test failed!
          
          📦 Build: ${{ needs.build-and-push.result }}
          🔍 Security: ${{ needs.security-scan.result }}
          🧪 Tests: ${{ needs.test-image.result }}
          
          Please check the logs for details.
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}