name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_call:

env:
  NODE_VERSION: '20.x'

jobs:
  # Á®ãÂºèÁ¢ºÂìÅË≥™Ê™¢Êü•
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run TypeScript type check
      run: npm run type-check
    
    - name: Check for unused dependencies
      run: |
        npx depcheck \
          --ignore-bin-package \
          --ignores="@commitlint/cli,@commitlint/config-conventional,lint-staged,autoprefixer,postcss,prettier,husky,commitizen,cz-conventional-changelog,cz-customizable,@vitest/coverage-v8" \
        || echo "Depcheck completed with warnings (expected for tooling dependencies)"
      continue-on-error: true

  # ÂñÆÂÖÉÊ∏¨Ë©¶
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test:coverage
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Âª∫ÁΩÆÊ∏¨Ë©¶
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_APP_NAME: "CI Build Test"
        NEXT_PUBLIC_APP_URL: "https://test.example.com"
        NEXTAUTH_SECRET: "test-secret-for-ci"
        NEXTAUTH_URL: "https://test.example.com"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          public/
        retention-days: 1

  # E2E Ê∏¨Ë©¶
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    strategy:
      matrix:
        browser: [chromium, firefox]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: |
        npx playwright install --with-deps ${{ matrix.browser }}
        # Á¢∫‰øù chromium ÂèØÁî®Êñº global-setup.ts
        if [[ "${{ matrix.browser }}" != "chromium" ]]; then
          npx playwright install --with-deps chromium
        fi
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
    
    - name: Run E2E tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        NEXT_PUBLIC_APP_NAME: "E2E Test App"
        NEXT_PUBLIC_APP_URL: "http://localhost:3000"
        NEXTAUTH_SECRET: "test-secret-for-e2e"
        NEXTAUTH_URL: "http://localhost:3000"
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-results-${{ matrix.browser }}
        path: |
          test-results/
          playwright-report/
        retention-days: 7

  # ÂÆâÂÖ®ÊÄßÊéÉÊèè
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run npm audit
      run: npm audit --audit-level=high
      continue-on-error: true
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  # Á®ãÂºèÁ¢ºÂìÅË≥™ÂàÜÊûê
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarCloud ÈúÄË¶ÅÂÆåÊï¥Ê≠∑Âè≤
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  # ÊïàËÉΩÊ∏¨Ë©¶
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
    
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.13.x
    
    - name: Build application for performance test
      run: npm run build
      env:
        NEXT_PUBLIC_APP_NAME: "Performance Test App"
        NEXT_PUBLIC_APP_URL: "http://localhost:3000"
        NEXTAUTH_SECRET: "test-secret-for-performance"
        NEXTAUTH_URL: "http://localhost:3000"
    
    - name: Run Lighthouse CI
      run: |
        npm start &
        sleep 15
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # ÈÄöÁü•ÁµêÊûú
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, unit-tests, build, e2e-tests]
    if: always()
    
    steps:
    - name: Notify Slack on success
      if: ${{ secrets.SLACK_WEBHOOK != '' && needs.lint-and-type-check.result == 'success' && needs.unit-tests.result == 'success' && needs.build.result == 'success' && needs.e2e-tests.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "‚úÖ CI Pipeline passed for ${{ github.ref }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Notify Slack on failure
      if: ${{ secrets.SLACK_WEBHOOK != '' && (needs.lint-and-type-check.result == 'failure' || needs.unit-tests.result == 'failure' || needs.build.result == 'failure' || needs.e2e-tests.result == 'failure') }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "‚ùå CI Pipeline failed for ${{ github.ref }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Log completion (no Slack)
      if: ${{ secrets.SLACK_WEBHOOK == '' }}
      run: |
        if [[ "${{ needs.lint-and-type-check.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" && "${{ needs.build.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
          echo "‚úÖ CI Pipeline completed successfully for ${{ github.ref }}"
        else
          echo "‚ùå CI Pipeline had failures for ${{ github.ref }}"
        fi
        echo "üí¨ Slack notifications are disabled (no webhook configured)"