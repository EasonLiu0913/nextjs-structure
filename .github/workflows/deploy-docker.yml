name: Deploy Docker Container

on:
  workflow_run:
    workflows: ["Docker Build and Push"]
    types:
      - completed
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 部署到 Azure Container Instances
  deploy-aci:
    name: Deploy to Azure Container Instances
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.environment }}" == "production" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "CONTAINER_GROUP=nextjs-app-prod" >> $GITHUB_ENV
          echo "DNS_LABEL=nextjs-app-prod" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "CONTAINER_GROUP=nextjs-app-staging" >> $GITHUB_ENV
          echo "DNS_LABEL=nextjs-app-staging" >> $GITHUB_ENV
        fi
        
        IMAGE_TAG="${{ github.event.inputs.image_tag || github.sha }}"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure Container Instances
      run: |
        # 設定環境變數
        if [[ "$ENVIRONMENT" == "production" ]]; then
          APP_NAME="${{ secrets.PROD_APP_NAME }}"
          APP_URL="${{ secrets.PROD_APP_URL }}"
          NEXTAUTH_SECRET="${{ secrets.PROD_NEXTAUTH_SECRET }}"
          NEXTAUTH_URL="${{ secrets.PROD_NEXTAUTH_URL }}"
          GOOGLE_CLIENT_ID="${{ secrets.PROD_GOOGLE_CLIENT_ID }}"
          GOOGLE_CLIENT_SECRET="${{ secrets.PROD_GOOGLE_CLIENT_SECRET }}"
          SENTRY_DSN="${{ secrets.PROD_SENTRY_DSN }}"
        else
          APP_NAME="${{ secrets.STAGING_APP_NAME }}"
          APP_URL="${{ secrets.STAGING_APP_URL }}"
          NEXTAUTH_SECRET="${{ secrets.STAGING_NEXTAUTH_SECRET }}"
          NEXTAUTH_URL="${{ secrets.STAGING_NEXTAUTH_URL }}"
          GOOGLE_CLIENT_ID="${{ secrets.STAGING_GOOGLE_CLIENT_ID }}"
          GOOGLE_CLIENT_SECRET="${{ secrets.STAGING_GOOGLE_CLIENT_SECRET }}"
          SENTRY_DSN="${{ secrets.STAGING_SENTRY_DSN }}"
        fi
        
        # 部署容器
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name $CONTAINER_GROUP \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG \
          --dns-name-label $DNS_LABEL \
          --ports 3000 \
          --cpu 1 \
          --memory 2 \
          --restart-policy Always \
          --environment-variables \
            NODE_ENV=production \
            NEXT_PUBLIC_APP_NAME="$APP_NAME" \
            NEXT_PUBLIC_APP_URL="$APP_URL" \
            NEXTAUTH_URL="$NEXTAUTH_URL" \
            NEXT_PUBLIC_SENTRY_DSN="$SENTRY_DSN" \
          --secure-environment-variables \
            NEXTAUTH_SECRET="$NEXTAUTH_SECRET" \
            GOOGLE_CLIENT_ID="$GOOGLE_CLIENT_ID" \
            GOOGLE_CLIENT_SECRET="$GOOGLE_CLIENT_SECRET" \
          --registry-login-server ${{ env.REGISTRY }} \
          --registry-username ${{ github.actor }} \
          --registry-password ${{ secrets.GITHUB_TOKEN }}
    
    - name: Wait for deployment
      run: |
        echo "Waiting for container to be ready..."
        sleep 60
        
        # 獲取容器 IP
        CONTAINER_IP=$(az container show \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name $CONTAINER_GROUP \
          --query ipAddress.ip \
          --output tsv)
        
        echo "Container IP: $CONTAINER_IP"
        echo "CONTAINER_IP=$CONTAINER_IP" >> $GITHUB_ENV
    
    - name: Health check
      run: |
        # 健康檢查
        for i in {1..10}; do
          if curl -f "http://$CONTAINER_IP:3000/api/health"; then
            echo "✅ Health check passed"
            break
          else
            echo "⏳ Attempt $i: Health check failed, retrying..."
            sleep 30
          fi
          
          if [ $i -eq 10 ]; then
            echo "❌ Health check failed after 10 attempts"
            exit 1
          fi
        done

  # 部署到 Azure Container Apps (替代方案)
  deploy-container-apps:
    name: Deploy to Azure Container Apps
    runs-on: ubuntu-latest
    if: false  # 設為 true 來啟用此部署方式
    
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure Container Apps
      run: |
        # 建立或更新 Container App
        az containerapp up \
          --name nextjs-app-${{ env.ENVIRONMENT }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --location eastus \
          --environment nextjs-env-${{ env.ENVIRONMENT }} \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --target-port 3000 \
          --ingress external \
          --query properties.configuration.ingress.fqdn

  # 部署到 Kubernetes (可選)
  deploy-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    if: false  # 設為 true 來啟用 Kubernetes 部署
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ secrets.AKS_CLUSTER_NAME }}
    
    - name: Deploy to Kubernetes
      run: |
        # 替換 Kubernetes 部署檔案中的映像標籤
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/deployment.yaml
        
        # 部署到 Kubernetes
        kubectl apply -f k8s/
        
        # 等待部署完成
        kubectl rollout status deployment/nextjs-app

  # 通知部署結果
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-aci]
    if: always()
    
    steps:
    - name: Notify successful deployment
      if: ${{ needs.deploy-aci.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          🚀 Docker container deployed successfully!
          
          🐳 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          🌍 Environment: ${{ env.ENVIRONMENT }}
          🔗 URL: http://${{ env.DNS_LABEL }}.eastus.azurecontainer.io
          
          Container is ready! ✅
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Notify failed deployment
      if: ${{ needs.deploy-aci.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          🚨 Docker container deployment failed!
          
          🐳 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          🌍 Environment: ${{ env.ENVIRONMENT }}
          
          Please check the deployment logs.
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}