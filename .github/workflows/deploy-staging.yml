name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if tests fail'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '20.x'
  AZURE_WEBAPP_NAME: 'nextjs-app-staging'
  AZURE_WEBAPP_PACKAGE_PATH: '.'

jobs:
  # Âü∑Ë°å CI Ê™¢Êü•
  ci-checks:
    name: CI Checks
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  # Âª∫ÁΩÆÂíåÈÉ®ÁΩ≤Âà∞Ê∏¨Ë©¶Áí∞Â¢É
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [ci-checks]
    if: ${{ always() && (needs.ci-checks.result == 'success' || github.event.inputs.force_deploy == 'true') }}
    
    environment:
      name: staging
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_APP_NAME: ${{ secrets.STAGING_APP_NAME }}
        NEXT_PUBLIC_APP_URL: ${{ secrets.STAGING_APP_URL }}
        NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}
        NEXTAUTH_SECRET: ${{ secrets.STAGING_NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.STAGING_NEXTAUTH_URL }}
        GOOGLE_CLIENT_ID: ${{ secrets.STAGING_GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.STAGING_GOOGLE_CLIENT_SECRET }}
        NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.STAGING_SENTRY_DSN }}
    
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r .next deployment/
        cp -r public deployment/
        cp package.json deployment/
        cp package-lock.json deployment/
        cp next.config.js deployment/
        
        # Âª∫Á´ã standalone ÈÉ®ÁΩ≤ÂåÖ
        if [ -d ".next/standalone" ]; then
          cp -r .next/standalone/* deployment/
        fi
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: './deployment'
        startup-command: 'npm start'
    
    - name: Configure App Settings
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        app-settings-json: |
          [
            {
              "name": "NEXT_PUBLIC_APP_NAME",
              "value": "${{ secrets.STAGING_APP_NAME }}"
            },
            {
              "name": "NEXT_PUBLIC_APP_URL",
              "value": "${{ secrets.STAGING_APP_URL }}"
            },
            {
              "name": "NEXTAUTH_SECRET",
              "value": "${{ secrets.STAGING_NEXTAUTH_SECRET }}"
            },
            {
              "name": "NEXTAUTH_URL",
              "value": "${{ secrets.STAGING_NEXTAUTH_URL }}"
            },
            {
              "name": "NODE_ENV",
              "value": "production"
            }
          ]
    
    - name: Wait for deployment
      run: sleep 30
    
    - name: Health check
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health)
        if [ $response -eq 200 ]; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed with status: $response"
          exit 1
        fi

  # Ê∏¨Ë©¶Áí∞Â¢ÉÁÖôÈúßÊ∏¨Ë©¶
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install --with-deps chromium
    
    - name: Run smoke tests
      run: npx playwright test tests/e2e/auth/login.spec.ts --project=chromium
      env:
        PLAYWRIGHT_BASE_URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
    
    - name: Upload smoke test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 3

  # ÈÄöÁü•ÈÉ®ÁΩ≤ÁµêÊûú
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests]
    if: always()
    
    steps:
    - name: Notify successful deployment
      if: ${{ needs.deploy-staging.result == 'success' && needs.smoke-tests.result == 'success' }}
      uses: slackapi/slack-github-action@v1
      with:
        status: success
        text: |
          üöÄ Staging deployment successful!
          
          üîó URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
          üìù Commit: ${{ github.sha }}
          üë§ Author: ${{ github.actor }}
          
          ‚úÖ All smoke tests passed
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Notify failed deployment
      if: ${{ needs.deploy-staging.result == 'failure' || needs.smoke-tests.result == 'failure' }}
      uses: slackapi/slack-github-action@v1
      with:
        status: failure
        text: |
          ‚ùå Staging deployment failed!
          
          üìù Commit: ${{ github.sha }}
          üë§ Author: ${{ github.actor }}
          
          Please check the GitHub Actions logs for details.
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Âª∫Á´ã GitHub Release (Â¶ÇÊûúÊòØ tag)
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests]
    if: ${{ startsWith(github.ref, 'refs/tags/') && needs.deploy-staging.result == 'success' && needs.smoke-tests.result == 'success' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## üöÄ Release Notes
          
          ### üìã Changes
          - Deployed to staging environment
          - All tests passed
          
          ### üîó Links
          - [Staging Environment](https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net)
          - [GitHub Actions](https://github.com/${{ github.repository }}/actions)
          
          ### üß™ Test Results
          - ‚úÖ Unit Tests: Passed
          - ‚úÖ E2E Tests: Passed  
          - ‚úÖ Smoke Tests: Passed
        draft: false
        prerelease: true